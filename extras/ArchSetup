#!/usr/bin/env bash

RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YLW=$(tput setaf 3)
BLU=$(tput setaf 4)
MGT=$(tput setaf 5)
CYN=$(tput setaf 6)
WHT=$(tput setaf 7)
BLD=$(tput bold)
RST=$(tput sgr0)

display_logo () {
	printf "
                        $BLU.
                       $BLU/ $MGT\\
                      $BLU/   $MGT\\
                     $BLU/^.   $MGT\\
                    $BLU/  .$WHT-$MGT.  \\
                   $BLU/  (   $MGT) _\\
                  $BLU/ _.~   $MGT~._^\\
                 $BLU/.^         $MGT^.\\

	"
    printf "$RED󰮯   $CYN   $YLW󰊠   $WHT   $MGT󰊠   $GRN   $BLU󰊠   $RED   $WHT󰮯\n"
}

info_msg() {
    local text="${1:?}"
    printf '\n\n%s%s[ %s ] %s\n\n' "${BLD}" "${BLU}" "${text}" "${RST}"
}
selection() {
    local ordinal="${1:?}"
    local text="${2:?}"
    printf '%s%s%s)%s %s%s%s\n' "${BLD}" "${CYN}" "${ordinal}" "${RST}" "${WHT}" "${text}" "${RST}"
}
success_msg() {
    local text="${1:?}"
    printf '%s%s %s %s\n' "${BLD}" "${GRN}" "${text}" "${RST}"
}
warning_msg() {
    local text="${1:?}"
    printf '%s%s %s %s\n' "${BLD}" "${YLW}" "${text}" "${RST}"
}
error_msg() {
    local text="${1:?}"
    printf '%s%s %s %s\n' "${BLD}" "${RED}" "${text}" "${RST}"
}

########## ---------- Warning ---------- ##########
display_logo
info_msg "Welcome!"

if [ "$(id -u)" = 0 ]; then
    warning_msg "This script MUST NOT be run as root user"
    exit 1
fi

while true; do
    read -rp "$BLD$YLW- This script configures my personal Arch setup. Do you wish to continue (NOT recommended) ? [y/N]: $RST" yn
    case $yn in
        [Yy]* ) break ;;
        [Nn]* ) exit ;;
        *) error_msg "Error: just write 'y' or 'n'" ;;
    esac
done
clear

########## ---------- Utility Functions ---------- ##########
check_install_dependencies() {
    local dependencies="$1"
    local missing=()

    # Split the string into an array using space as delimiter
    IFS=' ' read -r -a deps <<< "$dependencies"

    is_installed() {
        pacman -Q "$1" &> /dev/null
    }
    printf '%s%s%s Checking for required packages...%s\n' "${BLD}" "${WHT}" "${text}" "${RST}"
    for package in "${deps[@]}"; do
        if ! is_installed "$package"; then
            missing+=("$package")
        else
            warning_msg "   $package is already installed on your system!"
            sleep 1
        fi
    done

    if [ ${#missing[@]} -gt 0 ]; then
        for package in "${missing[@]}"; do
            if sudo pacman -S "$package" --noconfirm >/dev/null 2>> RiceError.log; then
                success_msg "   $package has been installed successfully"
                sleep 1
            else
                error_msg "   $package has not been installed correctly. See RiceError.log for more details"
                sleep 1
            fi
        done
    fi
    printf "\n"
}
########## ---------- Functional components ---------- ##########
adjust_brightness() {
    info_msg "Adjust contrast and brightness"

    check_install_dependencies "xorg-xgamma brightnessctl"

    # New values
    new_gamma=0.8
    new_brightness_percent=100

    # Apply new settings
    xgamma -gamma ${new_gamma} > /dev/null 2>> RiceError.log
    brightnessctl s ${new_brightness_percent}% > /dev/null 2>> RiceError.log

    success_msg "Adjust contrast to ${new_gamma} succesfully"
    success_msg "Adjust brightness to ${new_brightness_percent}% succesfully"

    sleep 2
}

setup_audio() {
    info_msg "Setup audio/sound"

    check_install_dependencies "alsa-utils pipewire pipewire-alsa pipewire-jack pipewire-pulse"

    #By default, ALSA has all channels muted. Those have to be unmuted manually.
    #Unmute with amixer
    amixer sset Master unmute 100% > /dev/null

    #Enable and start pipewire
    systemctl --user enable pipewire > /dev/null 2>> RiceError.log
    systemctl --user start pipewire > /dev/null 2>> RiceError.log

    success_msg "Basic audio setup completed"

    sleep 2
}

change_dns_server() {
    info_msg "Change default DNS server to Google DNS"

    if ! grep -q "static domain_name_servers=8.8.4.4 8.8.8.8" /etc/dhcpcd.conf; then
        echo "static domain_name_servers=8.8.4.4 8.8.8.8" | sudo tee -a /etc/dhcpcd.conf > /dev/null
        success_msg "Change default DNS server successfully"
    else
        warning_msg "Google DNS server already configured"
    fi

    sleep 2
}

config_touchpad() {
    info_msg "Enable touchpad tapping, natural scrolling"

    local file_path="/etc/X11/xorg.conf.d/30-touchpad.conf"

    if [ ! -f "$file_path" ]; then
        sudo tee "$file_path" > /dev/null << EOF
Section "InputClass"
    Identifier "touchpad"
    Driver "libinput"
    MatchIsTouchpad "on"
    Option "Tapping" "on"
    Option "TappingButtonMap" "lmr"
    Option "NaturalScrolling" "true"
EndSection
EOF
        success_msg "Enable touchpad tapping and natural scrolling successfully"
    else
        warning_msg "Touchpad configuration already existed"
    fi

    sleep 2
}

connect_external_monitor()  {
    info_msg "Connect to the external monitor immediately"

    local INTERNAL_DISPLAY=$(xrandr | grep "connected primary" | awk '{print $1}')
    local EXTERNAL_DISPLAY=$(xrandr | grep "connected" | grep -v "primary" | awk '{print $1}')

    xrandr --output "$INTERNAL_DISPLAY" --auto --output "$EXTERNAL_DISPLAY" --auto --right-of "$INTERNAL_DISPLAY"

    sleep 2
}

install_and_configure_all() {
    adjust_brightness
    setup_audio
    change_dns_server
    config_touchpad
    connect_external_monitor

    printf "\n"
    success_msg "Installation finished !"
}

########## ---------- Main menu ---------- ##########
show_menu() {
    display_logo
    info_msg "Select an option"

    selection 1 "Adjust contrast and brightness"
    selection 2 "Setup audio/sound"
    selection 3 "Change default DNS server to Google DNS"
    selection 4 "Enable touchpad tapping, natural scrolling"
    selection 5 "Connect to the external monitor immediately"
    selection 6 "All"
    selection 7 "Exit"

    printf '\n%s%sEnter your choice [1-7]: %s' "${BLD}" "${YLW}" "${RST}"
}

while true; do
    show_menu
    read choice
    case $choice in
        1) adjust_brightness ;;
        2) setup_audio ;;
        3) change_dns_server ;;
        4) config_touchpad ;;
        5) connect_external_monitor ;;
        6) install_and_configure_all; break ;;
        7) echo "Exiting..."; exit 0 ;;
        *) echo "Invalid option, please try again." ;;
    esac
done
