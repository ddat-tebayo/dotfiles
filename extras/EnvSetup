#!/usr/bin/env bash

RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YLW=$(tput setaf 3)
BLU=$(tput setaf 4)
MGT=$(tput setaf 5)
CYN=$(tput setaf 6)
WHT=$(tput setaf 7)
BLD=$(tput bold)
RST=$(tput sgr0)

display_logo () {
	printf "
                        $BLU.
                       $BLU/ $MGT\\
                      $BLU/   $MGT\\
                     $BLU/^.   $MGT\\
                    $BLU/  .$WHT-$MGT.  \\
                   $BLU/  (   $MGT) _\\
                  $BLU/ _.~   $MGT~._^\\
                 $BLU/.^         $MGT^.\\

	"
    printf "$RED󰮯   $CYN   $YLW󰊠   $WHT   $MGT󰊠   $GRN   $BLU󰊠   $RED   $WHT󰮯\n"
}

info_msg() {
    printf '\n\n%s%s[%s %s%s %s%s %s%s]%s\n\n' "${BLD}" "${RED}" "${RST}" "${BLD}" "${BLU}" "${1:?}" "${RST}" "${BLD}" "${RED}" "${RST}"
}
installing_msg() {
    printf '%s%s %s %s\n' "${BLD}" "${WHT}" "${1:?}" "${RST}"
}
success_msg() {
    printf '%s%s %s %s\n' "${BLD}" "${GRN}" "${1:?}" "${RST}"
}
warning_msg() {
    printf '%s%s %s %s\n' "${BLD}" "${YLW}" "${1:?}" "${RST}"
}
error_msg() {
    printf '%s%s %s %s\n' "${BLD}" "${RED}" "${1:?}" "${RST}" | tee -a ~/RiceError.log
}

########## ---------- Warning ---------- ##########
display_logo
info_msg "Welcome!"

if [ "$(id -u)" = 0 ]; then
    warning_msg "This script MUST NOT be run as root user"
    exit 1
fi

home_dir=$HOME
current_dir=$(pwd)

if [ "$current_dir" != "$home_dir" ]; then
    warning_msg "The script must be executed from the HOME directory"
    exit 1
fi

while true; do
    read -rp "$BLD$YLW- This script configures my personal Arch setup. Do you wish to continue (NOT recommended) ? [y/N]: $RST" yn
    case $yn in
        [Yy]* ) break ;;
        [Nn]* ) exit ;;
        *) error_msg "Error: just write 'y' or 'n'" ;;
    esac
done
clear

display_logo

########## ---------- Utility Functions ---------- ##########
backup() {
    local src=$1
    local backup_folder="$HOME/.RiceBackup"
    local datetime=$(date +%Y%m%d-%H%M%S)

    local base_name=$(basename "$src")
    local dest="$backup_folder/$base_name"_"$datetime"

    [ ! -d "$backup_folder" ] && mkdir -p "$backup_folder"
    
    if [ -d "$src" ] || [ -f "$src" ]; then
        if mv "$src" "$dest" 2>> RiceError.log; then
            success_msg "'$base_name' backed up successfully at $dest"
        else
            error_msg "Failed to backup '$base_name'. See ~/RiceError.log"
        fi
    else
        warning_msg "'$base_name' does not exist, no backup needed"
    fi
    printf "\n"
}

restart_shell_session() {
    # Get the current shell
    current_shell=$(echo $SHELL)

    # Determine the configuration file based on the current shell
    case "$current_shell" in
        */bash)
            config_file=".bashrc"
            ;;
        */zsh)
            config_file=".zshrc"
            ;;
        */fish)
            config_file=".config/fish/config.fish"
            ;;
        *)
            error_msg "Unsupported shell: $current_shell"
            exit 1
            ;;
    esac

    # Restart the session by sourcing the appropriate configuration file
    if source ~/$config_file; then
        success_msg "Restarted shell session"
    fi
}

check_install_dependencies() {
    local dependencies="$1"
    local missing=()

    # Split the string into an array using space as delimiter
    IFS=' ' read -r -a deps <<< "$dependencies"

    is_installed() {
        pacman -Q "$1" &> /dev/null
    }
    installing_msg "Checking for required packages..."

    for package in "${deps[@]}"; do
        if ! is_installed "$package"; then
            missing+=("$package")
        else
            warning_msg "   '$package' is already installed on your system!"
        fi
    done

    if [ ${#missing[@]} -gt 0 ]; then
        for package in "${missing[@]}"; do
            if $pacman_wrappers -S "$package" --noconfirm --skipreview >/dev/null 2>&1; then
                success_msg "   '$package' has been installed successfully"
            else
                error_msg "   Failed to install '$package'. You may need to install it manually"
            fi
        done
    fi
    printf "\n"
}

########## ---------- Functional components ---------- ##########
install_pacman_wrappers() {
    if ! command -v $pacman_wrappers >/dev/null 2>&1; then
        info_msg "Install $pacman_wrappers (AUR Helper), this could take a long time..."
        installing_msg "Installing $pacman_wrappers..."
        {
            # Install rustup, cargo, rustc... before installing paru
            sudo pacman -S base-devel rustup --noconfirm
            rustup default stable

            # Install paru
            cd "$HOME" || exit
            git clone --no-progress https://aur.archlinux.org/$pacman_wrappers.git
            cd $pacman_wrappers || exit
            makepkg -si --noconfirm
            cd "$HOME" && rm -rf paru
            clear

            success_msg "Install $pacman_wrappers (AUR helper) successfully"
            restart_shell_session
            sleep 2
        } || {
            error_msg "   Failed to install $pacman_wrappers. You may need to install it manually."
            sleep 3
            exit 1
        }
    fi
}

change_shell_to_zsh() {
    info_msg "Change your default shell to zsh"

    check_install_dependencies "zsh"

    if [[ ! "$(basename "$SHELL")" = "zsh" ]]; then
        warning_msg "Changing your shell to zsh. Your root password is needed"
        # Change the shell to zsh
        chsh -s "$(command -v zsh)"
        success_msg "Shell changed to zsh."
		printf "\n"

        # Prompt the user for a reboot
		while true; do
        	read -rp "$BLD$YLW Please reboot to apply changes and run this script again, reboot immediately? [y/N]: $RST" response
        	case "$response" in
             	[Yy]* )
                	warning_msg "Rebooting the system..."
                	sudo reboot
                	;;
            	[Nn]* )
                	warning_msg "Please reboot your system manually to apply changes."
                	exit 0
                	;;
            	*) error_msg "Error: just write 'y' or 'n'" ;;
        	esac
		done
    else
        warning_msg "Your shell is already zsh!"
    fi

	sleep 2
}

clone_dot_config() {
    info_msg "Clone some ~/.dotfiles from dotfiles repo"

    for file in .zshrc .gitconfig .xprofile; do
        if [ -f "$HOME/$file" ]; then
            backup "$file"
        fi

        curl -fsSL $dotfiles_path/$file -o $HOME/$file
        chmod 644 $HOME/$file
    done

    check_install_dependencies "zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting"

    success_msg "Clone ~/.dotfiles from remote repository successfully"
    sleep 2
}

install_fnm_nodes() {
    info_msg "Install Fast Node Manager (fnm), Nodejs"

    check_install_dependencies "curl unzip"

    # Function to check and install fnm
    install_fnm() {
        if command -v fnm >/dev/null 2>&1; then
            warning_msg "fnm is already installed"
        else
            installing_msg "Installing fnm..."
            {
                curl -fsSL https://fnm.vercel.app/install | zsh >/dev/null
                success_msg "Install fnm successfully"
                # Restart shell session to make fnm available in the current session
                restart_shell_session
            } || {
                error_msg "Failed to install fnm. You may need to install it manually"
            }
        fi
    }

    # Install Node.js latest LTS version using fnm
    if install_fnm; then
        printf "\n"
        installing_msg "Installing Node.js latest LTS version..."

        # Attempt to install the latest LTS version of Node.js
        if fnm install --lts >/dev/null 2>&1; then
            success_msg "   Node.js latest LTS installed successfully"
        else
            error_msg "   Failed to install Node.js LTS. You may need to install it manually"
        fi
    else
        error_msg "fnm is not installed. Please install fnm first"
    fi
    sleep 2
}

clone_neovim_config() {
    info_msg "Install neovim and clone my nvim config"

    backup "$HOME/.config/nvim"

    check_install_dependencies "neovim neovide"

    # Optionally uninstall previous nvim config
    rm -rf ~/.cache/nvim
    rm -rf ~/.local/share/nvim
    rm -rf ~/.local/state/nvim

    installing_msg "Cloning neovim-config from dotfiles repo..."
    # Clone my .zshrc and cleanup
    {
        git clone --no-progress $nvim_config_path ~/.config/nvim >/dev/null 2>&1
        rm -rf ~/.config/nvim/.git
        rm -rf ~/.config/nvim/.github
        success_msg "Install neovim successfully"
    } || {
        error_msg "   Failed to clone nvim-config. You may need to install it manually."
    }
}

####################################################

# For this installation, you need an AUR helper. I use `paru`, you can check other AUR helpers here:
# https://wiki.archlinux.org/title/AUR_helpers#Pacman_wrappers
pacman_wrappers="paru" 
install_pacman_wrappers # Install paru

change_shell_to_zsh # Change your default shell to zsh

# Install needed packages (fonts, essential middleware/tools, apps, software development tools... )
info_msg "Install needed packages"
check_install_dependencies "noto-fonts noto-fonts-emoji noto-fonts-cjk noto-fonts-extra \
alsa-utils pipewire pipewire-alsa pipewire-jack pipewire-pulse mpv unzip rar \
firefox google-chrome discord obsidian obs-studio telegram-desktop \
bat eza openssh ripgrep visual-studio-code-bin"

# Clone '.zshrc', '.xprofile', '.gitconfig' from dotfiles repo
dotfiles_path="https://raw.githubusercontent.com/ddat-tebayo/dotfiles/main/home"
clone_dot_config

install_fnm_nodes # Install fnm and Nodejs latest LTS version

# Install and clone my neovim config
nvim_config_path="https://github.com/ddat-tebayo/nvim-config.git"
clone_neovim_config
