#!/usr/bin/env bash

RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YLW=$(tput setaf 3)
BLU=$(tput setaf 4)
MGT=$(tput setaf 5)
CYN=$(tput setaf 6)
WHT=$(tput setaf 7)
BLD=$(tput bold)
RST=$(tput sgr0)

backup_folder=~/.RiceBackup
date=$(date +%Y%m%d-%H%M%S)

logo () {
	printf "
                        $BLU.
                       $BLU/ $MGT\\
                      $BLU/   $MGT\\
                     $BLU/^.   $MGT\\
                    $BLU/  .$WHT-$MGT.  \\
                   $BLU/  (   $MGT) _\\
                  $BLU/ _.~   $MGT~._^\\
                 $BLU/.^         $MGT^.\\

	"
    printf "$RED󰮯   $CYN   $YLW󰊠   $WHT   $MGT󰊠   $GRN   $BLU󰊠   $RED   $WHT󰮯\n\n\n"
}

title() {
    local text="${1:?}"
    printf '\n\n%s[%s%s %s%s %s]%s\n\n' "${RED}" "${RST}" "${CYN}" "${text}" "${RST}" "${RED}" "${RST}"
}

########## ---------- You must not run this as root ---------- ##########

if [ "$(id -u)" = 0 ]; then
    echo "This script MUST NOT be run as root user."
    exit 1
fi

home_dir=$HOME
current_dir=$(pwd)

if [ "$current_dir" != "$home_dir" ]; then
    printf "%s%sThe script must be executed from the HOME directory.%s\n" "${BLD}" "${YLW}" "${RST}"
    exit 1
fi

########## ---------- Warning ---------- ##########
logo
title "Welcome!"

while true; do
    read -rp " $YLW- This script configures my personal Arch setup. Do you wish to continue (NOT recommended) ? [y/N]: $RST" yn
    case $yn in
        [Yy]* ) break ;;
        [Nn]* ) exit ;;
        * ) printf " $RED Error: just write 'y' or 'n' $RST\n\n" ;;
    esac
done
clear

########## ---------- Install packages ---------- ##########

check_install_dependencies() {
    local dependencies="$1"
    local missing=()

    # Split the string into an array using space as delimiter
    IFS=' ' read -r -a deps <<< "$dependencies"

    for dep in "${deps[@]}"; do
        if ! pacman -Q "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done

    if [ ${#missing[@]} -gt 0 ]; then
        echo "%s%sInstalling missing dependencies: ${missing[*]}%s\n" "${BLD}" "${BLU}" "${RST}"
        sudo pacman -Sy --noconfirm "${missing[@]}"
    fi
}

########## ---------- Install zsh and zsh plugins ... ---------- ##########
logo
title "Installing zsh and its plugins"

# Backup current .zshrc file
if [ -f ~/.zshrc ]; then
    if mv ~/.zshrc "$backup_folder"/.zshrc_"$date" 2>> RiceError.log; then
        printf "%s%s.zshrc file backed up successfully at %s%s/.zshrc_%s%s\n" "${BLD}" "${GRN}" "${BLU}" "$backup_folder" "${date}" "${RST}"
    else
        printf "%s%sFailed to backup .zshrc file. See %sRiceError.log%s\n" "${BLD}" "${RED}" "${BLU}" "${RST}"
    fi
else
    printf "%s%sThe file .zshrc does not exist, %sno backup needed%s\n" "${BLD}" "${GRN}" "${YLW}" "${RST}"
fi

curl https://raw.githubusercontent.com/ddat-tebayo/dotfiles/main/home/.zshrc -o $HOME/.zshrc
chmod 644 ~/.zshrc

check_install_dependencies "zsh zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting"


printf "%s%sInstall zsh and plugins succesfully.%s\n" "${BLD}" "${GRN}" "${RST}"

########## ---------- Install fnm, nodejs ... ---------- ##########
title "Installing Fast Node Manager (fnm), Nodejs"

check_install_dependencies "curl unzip"

if command -v fnm >/dev/null 2>&1; then
    printf "%s%sfnm is already installed%s\n" "${BLD}" "${GRN}" "${RST}"
else
    printf "%s%sInstalling fnm...%s\n" "${BLD}" "${BLU}" "${RST}"
    {
        curl -fsSL https://fnm.vercel.app/install | bash
        # Source the profile to make fnm available in the current session
        source ~/.bashrc 2>/dev/null || source ~/.zshrc 2>/dev/null || source ~/.profile 2>/dev/null
        printf "%s%sInstall fnm succesfully.%s\n" "${BLD}" "${GRN}" "${RST}"
        } || {
        printf "\n%s%sFailed to install. You may need to install it manually%s\n" "${BLD}" "${RED}" "${RST}"
        exit 1
    }
fi

# Install Node.js latest LTS version using fnm
if command -v fnm >/dev/null 2>&1; then
    printf "%s%sInstalling Node.js lastest LTS version...%s\n" "${BLD}" "${BLU}" "${RST}"
    if fnm install --lts; then
        printf "%s%sNode.js lastest LTS installed successfully%s\n" "${BLD}" "${GRN}" "${RST}"
    else
        printf "\n%s%sFailed to install Node.js LTS%s\n" "${BLD}" "${RED}" "${RST}"
    fi
fi

########## ---------- Install Paru (AUR Helper) ---------- ##########

title "Installing Paru"

if command -v paru >/dev/null 2>&1; then
    printf "%s%sParu is already installed%s\n" "${BLD}" "${GRN}" "${RST}"
else
    printf "%s%sInstalling paru%s\n" "${BLD}" "${BLU}" "${RST}"
    {
        cd "$HOME" || exit
        git clone https://aur.archlinux.org/paru-bin.git
        cd paru-bin || exit
        makepkg -si --noconfirm
        printf "%s%sInstall paru (AUR helper) succesfully.%s\n" "${BLD}" "${GRN}" "${RST}"
        } || {
        printf "\n%s%sFailed to install Paru. You may need to install it manually%s\n" "${BLD}" "${RED}" "${RST}"
    }
fi

########## ---------- Install a Vietnamese IME for IBus ---------- ##########
title "Installing Vietnamese keyboard"

check_install_dependencies "ibus"

if command -v ibus >/dev/null 2>&1; then
    printf "\n%s%sIbus is already installed%s\n" "${BLD}" "${GRN}" "${RST}"
    printf "\n%s%sInstalling Ibus-bamboo, this should be fast!%s\n" "${BLD}" "${BLU}" "${RST}"
    paru -S ibus-bamboo --skipreview --noconfirm
fi

# Create ~/.xprofile if it doesn't exist
if [ ! -f ~/.xprofile ]; then
    touch ~/.xprofile
    chmod 644 ~/.xprofile
fi

# Add necessary environment variables to ~/.xprofile
{
    echo 'export GTK_IM_MODULE=ibus'
    echo 'export XMODIFIERS=@im=ibus'
    echo 'export QT_IM_MODULE=ibus'

    echo '# set IBus as the default input method'
    echo 'export DefaultIMModule=ibus'
    
    echo '# Start IBus daemon automatically'
    echo 'ibus-daemon -drx'
} >> ~/.xprofile

# Set keybinding for the next input method to <Control>space
gsettings set org.freedesktop.ibus.general.hotkey triggers "['<Control>space']"

# Configure input methods
#gsettings set org.freedesktop.ibus.general preload-engines "['xkb:us::eng', 'xkb:vn::vie']"
gsettings set org.freedesktop.ibus.general preload-engines "['BambooUs', 'Bamboo']"

printf "%s%sInstall Vietnamese IME for IBus succesfully.%s\n" "${BLD}" "${GRN}" "${RST}"

########## ---------- Install Neovim ---------- ##########
title "Installing Neovim"

check_install_dependencies "neovim"

# Backup current nvim configs
if [ -d "$HOME/.config/nvim" ]; then
    if mv "$HOME/.config/nvim" "$backup_folder/nvim_$date" 2>> RiceError.log; then
            printf "%s%snvim folder backed up successfully at %s%s/nvim_%s%s\n" "${BLD}" "${CGR}" "${CBL}" "$backup_folder" "$date" "${CNC}"
            sleep 1
        else
            printf "%s%sFailed to backup nvim folder. See %sRiceError.log%s\n" "${BLD}" "${CRE}" "${CBL}" "${CNC}"
            sleep 1
    fi
    else
        printf "%s%snvim folder does not exist, %sno backup needed%s\n" "${BLD}" "${CGR}" "${CYE}" "${CNC}"
        sleep 1
fi

# Optionally uninstall previous nvim config
rm -rf ~/.cache/nvim
rm -rf ~/.local/share/nvim
rm -rf ~/.local/state/nvim

# Clone my .zshrc and cleanup
git clone git@github.com:ddat-tebayo/nvim-config.git ~/.config/nvim
rm -rf ~/.config/nvim/.git
rm -rf ~/.config/nvim/.github

printf "%s%sInstall neovim succesfully.%s\n" "${BLD}" "${GRN}" "${RST}"

