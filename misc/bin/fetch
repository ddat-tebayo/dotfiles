#!/usr/bin/env bash

# colors
BLK="\e[30m"
RED="\e[31m"
GRN="\e[32m"
YLW="\e[33m"
BLU="\e[34m"
PUR="\e[35m"
CYN="\e[36m"
WHT="\e[37m"
GRY="\e[90;1m"
RST="\e[0m"
BLD="\033[1m"

PBLU=$(printf "%b" "\e[34m")
PPUR=$(printf "%b" "\e[35m")
PWHT=$(printf "%b" "\e[37m")

#########################################################
# Reference: https://github.com/unixporn/robbb/blob/master/fetcher.sh
name=$USER
host=$(uname -n)
distro=$(uname -o | awk -F '"' '/PRETTY_NAME/ { print $2 }' /etc/os-release)
kernel=$(uname -r)
get_pkg_count() {
	package_managers=('xbps-install' 'apk' 'apt' 'pacman' 'nix' 'dnf' 'rpm' 'emerge')
	for package_manager in ${package_managers[@]}; do
		if command -v $package_manager 2>/dev/null>&2; then
			case "$package_manager" in
				xbps-install ) xbps-query -l | wc -l ;;
				apk ) apk search | wc -l ;;
				apt ) apt list --installed 2>/dev/null | wc -l ;;
				pacman ) pacman -Q | wc -l ;;
				nix ) nix-env -qa --installed '*' | wc -l ;;
				dnf ) dnf list installed | wc -l ;;
				rpm ) rpm -qa | wc -l ;;
				emerge ) qlist -I | wc -l ;;
			esac

			# if a package manager is found return from the function
			return
		fi
	done
	echo 'Unknown'
}
term=$(ps -o sid= -p "$$" | xargs ps -o ppid= -p | xargs ps -o comm= -p)
get_de_wm() {
	wm="${XDG_CURRENT_DESKTOP#*:}"
	[ "$wm" ] || wm="$DESKTOP_SESSION"

	# for most WMs
	[ ! "$wm" ] && [ "$DISPLAY" ] && command -v xprop >/dev/null && {
		id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)
		id=${id##* }
		wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t | grep '^_NET_WM_NAME' | cut -d\" -f 2)
	}

	# for non-EWMH WMs
	[ ! "$wm" ] || [ "$wm" = "LG3D" ] &&
		wm=$(ps -e | grep -m 1 -o \
			-e "sway" \
			-e "kiwmi" \
			-e "wayfire" \
			-e "sowm" \
			-e "catwm" \
			-e "fvwm" \
			-e "dwm" \
			-e "2bwm" \
			-e "monsterwm" \
			-e "tinywm" \
			-e "xmonad")

	echo ${wm:-unknown}
}
storage=$(df -h / | awk '/^\//{print $3}')
# progress bar
FULL=━
EMPTY=━

draw() {
	perc=$1
	size=$2
	inc=$((perc * size / 100))
	out=
	color="$3"
	for v in $(seq 0 $((size - 1))); do
		test "$v" -le "$inc" &&
			out="${out}\e[1;${color}m${FULL}" ||
			out="${out}\e[0;37m${GRY}${EMPTY}"
	done
	printf $out
}
# cpu
cpu=$(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')
c_lvl=$(printf "%.0f" $cpu)

# ram
ram=$(free | awk '/Mem:/ {print int($3/$2 * 100.0)}')

# uptime
uptm=$(uptime -p | sed -e 's/hour/hr/' -e 's/hours/hrs/' -e 's/minutes/mins/' -e 's/minute/min/' -e 's/up //')
#########################################################
#Cleanup first
clear

#########################################################
# find the center of the screen
COL=$(tput cols)
ROW=$(tput lines)
((PADY = ROW / 2 - 10 - 22 / 2))
((PADX = COL / 2 - 34 / 2))

for ((i = 0; i < PADX; ++i)); do
	PADC="$PADC "
done

for ((i = 0; i < PADY; ++i)); do
	PADR="$PADR\n"
done

# vertical padding
printf "%b" "$PADR"
printf "\n"

PADXX=$((PADX - 3))
for ((i = 0; i < PADXX; ++i)); do
	PADCC="$PADCC "
done

#########################################################
# Ascii art
cat <<EOF
$PADCC$PBLD                   $PBLU.
$PADCC                  $PBLU/ $PPUR\\
$PADCC                 $PBLU/   $PPUR\\
$PADCC                $PBLU/^.   $PPUR\\
$PADCC               $PBLU/  .$PWHT-$PPUR.  \\
$PADCC              $PBLU/  (   $PPUR) _\\
$PADCC             $PBLU/ _.~   $PPUR~._^\\
$PADCC            $PBLU/.^         $PPUR^.\\

EOF

OUTT="$RED󰮯   $CYN   $YLW󰊠   $WHT   $PUR󰊠   $GRN   $BLU󰊠   $RED   $WHT󰮯"
printf "%s%b" "$PADC" "$OUTT"
printf "\n\n"

# greetings
printf "%s%b" "$PADC" "          Hello $BLUﮊ $PUR$BLD$name$RST\n"
printf "%s%b" "$PADC" "    $BLU $GRN$BLD$host$RST $YLWﴱ$RST Ready to F $RED\n"
printf "\n\n"
# environment
printf "%s%b" "$PADC" "$CYN       distro  $GRY⏹ $RST$distro\n"
printf "%s%b" "$PADC" "$YLW       kernel  $GRY⏹ $RST$kernel\n"
printf "%s%b" "$PADC" "$BLU     packages  $GRY⏹ $RST$(get_pkg_count)\n"
printf "%s%b" "$PADC" "$PUR        shell  $GRY⏹ $RST${SHELL##*/}\n"
printf "%s%b" "$PADC" "$CYN         term  $GRY⏹ $RST$term\n"
printf "%s%b" "$PADC" "$RED           wm  $GRY⏹ $RST$(get_de_wm)\n"
printf "%s%b" "$PADC" "$BLU         disk  $GRY⏹ $RST$storage used\n"
printf "\n\n"
printf "%b" "$PADC"
printf "   $PUR%-4s $WHT%-5s %-25s \n" " cpu" "$c_lvl%" $(draw $c_lvl 15 35)

printf "%b" "$RST$PADC"
printf "   $PUR%-4s $WHT%-5s %-25s \n" " ram" "$ram%" $(draw $ram 15 35)
printf " $RST\n"

printf "%s%b" "$PADC" "$CYN        uptime 神 $RST$uptm\n"
printf " $RST\n"

BAR=" ▓▒░"
OUTT="$RED$BAR$GRN$BAR$YLW$BAR$BLU$BAR$PUR$BAR$CYN$BAR$WHT$BAR$RED$BAR$RST"
printf "%s%b" "$PADC" "$OUTT"
#########################################################
# hide the cursor and wait for user input
tput civis
read -n 1

# give the cursor back
tput cnorm